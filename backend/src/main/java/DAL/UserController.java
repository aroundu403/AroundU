package DAL;

import DAO.User;

import javax.sql.DataSource;
import java.sql.*;

// This class will perform user related operations, such as inserting a new user,
// getting user data
public class UserController {

  private static final String TABLE_NAME = "users";

  /**
   * Return one user based on given user_id
   *
   * @param pool used for database connection
   * @param user_id unique representation of a user
   * @return a user object or null if this user is not found
   * @throws SQLException
   */
  public static User getUser(DataSource pool, String user_id) throws SQLException {
    User user = null;
    try (Connection conn = pool.getConnection()) {
      String stmt =
          String.format(
              "SELECT user_name, email, description FROM %s WHERE user_id = ?", TABLE_NAME);
      // PreparedStatement: Executes the SQL query in this PreparedStatement object and
      // returns the ResultSet object generated by the query.
      // Returns:
      // a ResultSet object that contains the data produced by the query; never null
      try (PreparedStatement getUserStmt = conn.prepareStatement(stmt)) {
        getUserStmt.setString(1, user_id);
        // execute the query and store the ResultSet object returned
        ResultSet userResults = getUserStmt.executeQuery();
        // travers all objects in ResultSet
        while (userResults.next()) {
          user = new User();
          user.user_name = userResults.getString(1);
          user.email = userResults.getString(2);
          user.description = userResults.getString(3);
        }
        userResults.close();
        return user;
      }
    }
  }

  /**
   * Add a user to the users Table based on given information
   *
   * @param pool used for database connection
   * @param user object that represent a user with relevnat information
   * @return returns true if insert successfully, returns false otherwise
   */
  public static boolean addUser(DataSource pool, User user) {
    try (Connection conn = pool.getConnection()) {
      String stmt =
          String.format(
              "INSERT INTO %s (user_id, user_name, email, description, register_time) VALUES (?, ?, ?, ?, ?);",
              TABLE_NAME);
      try (PreparedStatement addUserStmt = conn.prepareStatement(stmt)) {
        addUserStmt.setString(1, user.user_id);
        addUserStmt.setString(2, user.user_name);
        addUserStmt.setString(3, user.email);
        addUserStmt.setString(4, user.description);
        addUserStmt.setTimestamp(5, new Timestamp(System.currentTimeMillis()));
        addUserStmt.executeUpdate();
        return true;
      }
    } catch (SQLException e) {
      return false;
    }
  }

  /**
   * Update a user's description
   *
   * @param pool used for database connection
   * @param user_id unique representation of a user
   * @param description user description
   * @return returns true if updated successfully, returns false otherwise
   */
  public static boolean updateUserDescription(DataSource pool, String user_id, String description) {
    try (Connection conn = pool.getConnection()) {
      String stmt = String.format("UPDATE %s SET description = ? WHERE user_id = ?;", TABLE_NAME);
      try (PreparedStatement updateDescriptionStmt = conn.prepareStatement(stmt)) {
        updateDescriptionStmt.setString(1, description);
        updateDescriptionStmt.setString(2, user_id);
        updateDescriptionStmt.executeUpdate();
        return true;
      }
    } catch (SQLException e) {
      return false;
    }
  }

  /**
   * Check whether the given user is existed
   *
   * @param pool used for database connection
   * @param user_id unique representation of a user
   * @return returns true if this user already exists, returns false otherwise
   */
  public static boolean isUserExist(DataSource pool, String user_id) {
    try (Connection conn = pool.getConnection()) {
      String stmt = String.format("SELECT user_name FROM %s WHERE user_id = ?;", TABLE_NAME);
      try (PreparedStatement isUserExistStmt = conn.prepareStatement(stmt)) {
        isUserExistStmt.setString(1, user_id);
        ResultSet userResult = isUserExistStmt.executeQuery();
        if (userResult.next()) {
          userResult.close();
          return true;
        } else {
          userResult.close();
          return false;
        }
      }
    } catch (SQLException e) {
      return false;
    }
  }
}
